// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String   @unique
  hash      String

  firstName String?
  lastName  String?
  role    Role     @default(USER)

  Items     Item[]
  Profile Profile[]

  @@map("users")
}

model Profile {
  id     Int @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int @unique
}

model Item {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  title           String
  itemDescription String?
  quantity        Int
  price           Decimal @db.Decimal(10, 2)
  imageUrl        String?

  userId          Int
  user            User     @relation(fields: [userId], references: [id])

  categoryId      Int
  category        Category @relation(fields: [categoryId], references: [id])

  Transaction Transaction[]
  @@map("Items")
}

model Category {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  name        String
  description String?
  items       Item[]

  @@map("categories")
}

model Transaction {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  itemId      Int      
  item        Item     @relation(fields: [itemId], references: [id],  onDelete: Cascade)
  itemTitle   String
  price       Decimal  @db.Decimal(10, 2)
  beforeQty   Int
  soldQty     Int

  salerName   String?

  @@map("transactions")
}


enum Role {
  USER
  ADMIN
}